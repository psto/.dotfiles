# Function to source files if they exist
function zsh_add_file() {
  [ -f "$ZDOTDIR/$1" ] && source "$ZDOTDIR/$1"
}

function zsh_add_plugin() {
  PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
  if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then
    # For plugins
    zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh" || \
    zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.zsh"
  else
    git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
  fi
}

function zsh_add_completion() {
  PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
  if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then
    # For completions
    completion_file_path=$(ls $ZDOTDIR/plugins/$PLUGIN_NAME/_*)
    fpath+="$(dirname "${completion_file_path}")"
    zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh"
  else
    git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
  fpath+=$(ls $ZDOTDIR/plugins/$PLUGIN_NAME/_*)
    [ -f $ZDOTDIR/.zccompdump ] && $ZDOTDIR/.zccompdump
  fi
	completion_file="$(basename "${completion_file_path}")"
	if [ "$2" = true ] && compinit "${completion_file:1}"
}

# move the latest downloaded file to current path
function mv-download() {
  __fname="$(ls -t ~/downloads | head -n 1)"
  __fpath="$HOME/downloads/"$__fname""
  mv "$__fpath" \.
  echo "Moved $__fname to $__fpath"
}

# copy the latest downloaded file to current path
function cp-download() {
  __fname="$(ls -t ~/downloads | head -n 1)"
  __fpath="$HOME/downloads/"$__fname""
  cp -a "$__fpath" \.
  echo "Copied $__fname to $__fpath"
}

# open the latest downloaded file
function open-download() {
  __fname="$(ls -t ~/downloads | head -n 1)"
  __fpath="$HOME/downloads/"$__fname""
  xdg-open "$__fpath"
}

# fzf cd
function fcd() {
  local dir;

  while true; do
    # exit with ^D
    dir="$(ls -a1F | grep '[/@]$' | grep -v '^./$' | sed 's/@$//' | fzf --height 40% --reverse --no-multi --preview 'pwd' --preview-window=up,1,border-none --no-info)"
    if [[ -z "${dir}" ]]; then
      break
    elif [[ -d "${dir}" ]]; then
      cd "${dir}"
    fi
  done
}

# faster than cd ..
up() { cd $(eval printf '../'%.0s {1..$1}); }

# ripgrep-all with fzf
rga-fzf() {
	RG_PREFIX="rga --hidden --files-with-matches"
	local file
	file="$(
		FZF_DEFAULT_COMMAND="$RG_PREFIX '$1'" \
			fzf --sort --preview="[[ ! -z {} ]] && rga --pretty --context 5 {q} {}" \
				--phony -q "$1" \
				--bind "change:reload:$RG_PREFIX {q}" \
				--preview-window="70%:wrap"
	)" &&
	echo "opening $file" &&
	launch "$file"
}

# show git status or ls function
status-ls() {
  emulate -L zsh
  if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    git status -sb
  else
    eza
  fi
}

# make a new directory and cd into it
function mkcd { mkdir -p "$1" && cd "$1" }

# OSC-7 escape sequence for foot terminal spawning new terminal in the same dir
function osc7 {
  local LC_ALL=C
  export LC_ALL

  setopt localoptions extendedglob
  input=( ${(s::)PWD} )
  uri=${(j::)input/(#b)([^A-Za-z0-9_.\!~*\'\(\)-\/])/%${(l:2::0:)$(([##16]#match))}}
  print -n "\e]7;file://${HOSTNAME}${uri}\e\\"
}

function preview-drawings() {
  fd --type f \
    --extension svg \
    --exclude 'Archives/Other/Excalidraw/' | \
  fzf \
    --preview 'chafa -f sixels {}' \
    --preview-window 'down:90%' \
    --bind 'enter:execute(imv {}),ctrl-/:change-preview-window(down,90%,border-horizontal|hidden|right)'
}

# review changed files on this branch
function review_changes() {
  local base_branch="${1:-}"

  if [ -z "$base_branch" ]; then
    base_branch=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed 's@^refs/remotes/origin/@@')
    [ -z "$base_branch" ] && base_branch="main"
  fi

  git diff --name-only "$base_branch"...HEAD | fzf \
    --preview "git diff $base_branch...HEAD -- {} | delta --width \$FZF_PREVIEW_COLUMNS" \
    --bind "enter:execute($EDITOR {})"
}

# show staged and unstaged file changes
function changed_files() {
  git status --short | awk '{print $2}' | fzf \
    --preview "git diff --cached -- {} | delta --width \$FZF_PREVIEW_COLUMNS && git diff -- {} | delta --width \$FZF_PREVIEW_COLUMNS" \
    --bind "enter:execute($EDITOR {})"
}

# Show diff for argument PR number for current repo
function pr_diff() {
  gh pr diff "$1" | delta
}

# Show PR files for argument PR number for current repo
function pr_files() {
  gh pr diff "$1" --name-only | fzf \
    --bind "enter:execute($EDITOR {})"
}


# turn string into kebab case
function kebab() {
  echo "$*" | tr '[:upper:]' '[:lower:]' | sed 's/ /-/g' | tee >(wl-copy -n)
}


# fzf history with ctrl+d to delete
modified-fzf-history-widget() {
  local selected
  setopt localoptions noglobsubst noposixbuiltins pipefail no_aliases no_bash_rematch 2> /dev/null
  # appends the current shell history buffer to the HISTFILE
  builtin fc -AI $HISTFILE
  # pushes entries from the $HISTFILE onto a stack and uses this history
  builtin fc -p $HISTFILE $HISTSIZE $SAVEHIST
  selected="$(builtin fc -rl 1 |
    awk '{ cmd=$0; sub(/^[ \t]*[0-9]+\**[ \t]+/, "", cmd); if (!seen[cmd]++) print $0 }' |
    FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} ${FZF_DEFAULT_OPTS-} -n2..,.. --scheme=history --bind=ctrl-r:toggle-sort,ctrl-z:ignore ${FZF_CTRL_R_OPTS-} --query=${(qqq)LBUFFER} --multi" $(__fzfcmd))"
  local ret=$?
	if [[ -n $selected ]]; then
    if [[ "$selected" =~ ^[[:blank:]]*[[:digit:]]+ ]]; then
	  builtin fc -pa "$HISTFILE"
	  zle vi-fetch-history -n "$MATCH"
    else # selected is a custom query, not from history
      LBUFFER="$selected"
    fi
  fi
  # Read the history from the history file into the history list
  builtin fc -R $HISTFILE
  zle reset-prompt
  return $ret
}
zle -N modified-fzf-history-widget

# Search for content & copy path
function rgpath() {
  rg -l "$@" | fzf | xargs -0 realpath | wl-copy
}
