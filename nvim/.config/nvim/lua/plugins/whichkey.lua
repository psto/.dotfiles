return {
  "folke/which-key.nvim",
  event = "VeryLazy",
  opts = {
    spec = {
      { "<leader>a", "<cmd>lua vim.lsp.buf.code_action()<cr>", desc = "Action",                                                         icon = { icon = require("util.icons").ui.Fire, color = "red" } },
      { "<leader>d", group = "Debug" },
      { "<leader>c", "<cmd>:bw<CR>",                           desc = "Close Buffer",                                                   icon = { icon = require("util.icons").ui.BoldClose, color = "yellow" } },
      { "<leader>f", group = "Find" },
      { "<leader>e", "<cmd>Neotree toggle<CR>",                desc = "File Explorer",                                                  icon = { icon = require("util.icons").ui.FolderOpen, color = "azure" } },
      { "<leader>g", group = "Git",                            icon = { icon = require("util.icons").git.Logo, color = "red" } },
      { "m",         group = "Harpoon" },
      { "<leader>j", "<cmd>Telescope jumplist<cr>",            desc = "Jumplist",                                                       icon = require("util.icons").ui.List },
      { "<leader>L", group = "Lazy",                           icon = { icon = require("util.icons").misc.Sleep, color = "blue" } },
      { "<leader>l", group = "LSP",                            icon = { icon = require("util.icons").misc.MagicWand, color = "yellow" } },
      { "<leader>M", "<cmd>Mason<CR>",                         desc = "Mason",                                                          icon = { icon = require("util.icons").ui.Package, color = "orange" } },
      { "<leader>r", group = "Replace",                        icon = { icon = require("util.icons").ui.Watches, color = "gray" } },
      { "<leader>s", group = "System",                         icon = require("util.icons").ui.Dashboard },
    },
    plugins = {
      marks = true,       -- shows a list of your marks on ' and `
      registers = true,   -- shows your registers on " in NORMAL or <C-r> in INSERT mode
      spelling = {
        enabled = true,   -- enabling this will show WhichKey when pressing z= to select spelling suggestions
        suggestions = 20, -- how many suggestions should be shown in the list?
      },
      -- the presets plugin, adds help for a bunch of default keybindings in Neovim
      -- No actual key bindings are created
      presets = {
        operators = false,    -- adds help for operators like d, y, ... and registers them for motion / text object completion
        motions = false,      -- adds help for motions
        text_objects = false, -- help for text objects triggered after entering an operator
        windows = true,       -- default bindings on <c-w>
        nav = true,           -- misc bindings to work with windows
        z = true,             -- bindings for folds, spelling and others prefixed with z
        g = true,             -- bindings for prefixed with g
      },
    },
    show_help = false, -- show help message on the command line when the popup is visible
  },
  keys = {
    { "m,", '<cmd>lua require("harpoon.ui").nav_prev()<cr>', desc = "Harpoon Prev" },
    { "m.", '<cmd>lua require("harpoon.ui").nav_next()<cr>', desc = "Harpoon Next" },
    { "m;", '<cmd>lua require("harpoon.ui").toggle_quick_menu()<cr>', desc = "Harpoon UI" },
    { "mm", '<cmd>lua require("harpoon.mark").add_file()<cr>', desc = "Harpoon Mark" },
    { "ms", "<cmd>Telescope harpoon marks<cr>", desc = "Search Files" },
    { "<leader>Lc", "<cmd>Lazy clean<cr>", desc = "Clean" },
    { "<leader>Lh", "<cmd>Lazy check<cr>", desc = "Check" },
    { "<leader>Li", "<cmd>Lazy install<cr>", desc = "Install" },
    { "<leader>Ll", "<cmd>Lazy<cr>", desc = "Lazy" },
    { "<leader>Lo", "<cmd>Lazy log<cr>", desc = "Log" },
    { "<leader>Lp", "<cmd>Lazy profile<cr>", desc = "Profile" },
    { "<leader>Ls", "<cmd>Lazy sync<cr>", desc = "Sync" },
    { "<leader>Lu", "<cmd>Lazy update<cr>", desc = "Update" },
    { "<leader>b", "<cmd>Telescope buffers<cr>", desc = "Buffers" },
    { "<leader>dO", "<cmd>lua require'dap'.step_out()<cr>", desc = "Out" },
    { "<leader>db", "<cmd>lua require'dap'.toggle_breakpoint()<cr>", desc = "Breakpoint" },
    { "<leader>dc", "<cmd>lua require'dap'.continue()<cr>", desc = "Continue" },
    { "<leader>dd", "<cmd>:g/console.lo/dd<cr>", desc = "Remove console logs" },
    { "<leader>dg", "<cmd>lua require('zippy').insert_print()<CR>", desc = "Console log" },
    { "<leader>di", "<cmd>lua require'dap'.step_into()<cr>", desc = "Into" },
    { "<leader>dl", "<cmd>lua require'dap'.run_last()<cr>", desc = "Last" },
    { "<leader>do", "<cmd>lua require'dap'.step_over()<cr>", desc = "Over" },
    { "<leader>dr", "<cmd>lua require'dap'.repl.toggle()<cr>", desc = "Repl" },
    { "<leader>du", "<cmd>lua require'dapui'.toggle()<cr>", desc = "UI" },
    { "<leader>dx", "<cmd>lua require'dap'.terminate()<cr>", desc = "Exit" },
    { "<leader>fC", "<cmd>Telescope commands<cr>", desc = "Commands" },
    { "<leader>fH", "<cmd>Telescope highlights<cr>", desc = "Highlights" },
    { "<leader>fM", "<cmd>Telescope man_pages<cr>", desc = "Man Pages" },
    { "<leader>fQ", "<cmd>Telescope quickfixhistory <CR>", desc = "Quickfix History" },
    { "<leader>fR", "<cmd>Telescope registers<cr>", desc = "Registers" },
    { "<leader>fb", "<cmd>Telescope git_branches<cr>", desc = "Checkout Branch" },
    { "<leader>fc", "<cmd>Telescope git_bcommits<cr>", desc = "Buffer's commits" },
    { "<leader>fd", "<cmd>Telescope diagnostics<cr>", desc = "Find Errors" },
    { "<leader>ff", "<cmd>Telescope find_files<cr>", desc = "Find Files" },
    { "<leader>fh", "<cmd>Telescope help_tags<cr>", desc = "Help" },
    { "<leader>fk", "<cmd>Telescope keymaps<cr>", desc = "Keymaps" },
    { "<leader>fo", "<cmd>Telescope oldfiles<cr>", desc = "Recent File" },
    { "<leader>fp", "<cmd>Telescope file_browser path=%:p:h<CR>", desc = "File Browser" },
    { "<leader>fq", "<cmd>Telescope quickfix <CR>", desc = "Quickfix List" },
    { "<leader>fr", "<cmd>Telescope resume<cr>", desc = "Last Search" },
    { "<leader>fs", "<cmd>Telescope spell_suggest theme=get_cursor<CR>", desc = "Spelling" },
    { "<leader>ft", "<cmd>Telescope live_grep<cr>", desc = "Find Text" },
    { "<leader>fu", "<cmd>Telescope undo<cr>", desc = "Undo" },
    { "<leader>fw", "<cmd>Telescope grep_string<cr>", desc = "Find Word" },
    { "<leader>gD", "<cmd>Gitsigns diffthis HEAD<cr>", desc = "Git Diff" },
    { "<leader>gR", "<cmd>Gitsigns reset_buffer<CR>", desc = "Reset Buffer" },
    { "<leader>gb", "<cmd>Telescope git_branches<cr>", desc = "Checkout branch" },
    { "<leader>gc", "<cmd>Telescope git_commits<cr>", desc = "Checkout commit" },
    { "<leader>gd", '<cmd>lua require("util/functions").diffview_toggle()<CR>', desc = "DiffViewToggle" },
    { "<leader>ge", "<cmd>Gitsigns toggle_current_line_blame<CR>", desc = "Git Blame" },
    { "<leader>gg", "<cmd>lua _LAZYGIT_TOGGLE()<CR>", desc = "Lazygit" },
    { "<leader>gl", "<cmd>lua require'gitsigns'.blame_line{full=true}<CR>", desc = "Git Blame" },
    { "<leader>go", "<cmd>Telescope git_status<cr>", desc = "Open changed file" },
    { "<leader>gp", "<cmd>Gitsigns preview_hunk<CR>", desc = "Preview Hunk" },
    { "<leader>gq", "<cmd>Gitsigns setqflist<cr>", desc = "Hunk List" },
    { "<leader>gr", "<cmd>Gitsigns reset_hunk<CR>", desc = "Reset Hunk" },
    { "<leader>gs", "<cmd>Gitsigns stage_hunk<CR>", desc = "Stage Hunk" },
    { "<leader>gt", "<cmd>lua require('telescope').extensions.git_worktree.create_git_worktree()<cr>", desc = "Create worktree" },
    { "<leader>gu", "<cmd>lua require 'gitsigns'.undo_stage_hunk()<cr>", desc = "Undo Stage Hunk" },
    { "<leader>gw", "<cmd>lua require('telescope').extensions.git_worktree.git_worktrees()<cr>", desc = "List worktrees" },
    { "<leader>lR", "<cmd>TroubleToggle lsp_references<cr>", desc = "References" },
    { "<leader>lS", "<cmd>Telescope lsp_dynamic_workspace_symbols<cr>", desc = "Workspace Symbols" },
    { "<leader>ld", "<cmd>TroubleToggle<cr>", desc = "Diagnostics" },
    { "<leader>lf", "<cmd>lua vim.lsp.buf.format({ async = true })<cr>", desc = "Format" },
    { "<leader>lh", "<cmd>lua vim.lsp.inlay_hint.enable(not vim.lsp.inlay_hint.is_enabled())<cr>", desc = "Hint" },
    { "<leader>li", "<cmd>LspInfo<cr>", desc = "Info" },
    { "<leader>lj", "<cmd>lua vim.diagnostic.goto_next({buffer=0})<CR>", desc = "Next Diagnostic" },
    { "<leader>lk", "<cmd>lua vim.diagnostic.goto_prev({buffer=0})<cr>", desc = "Prev Diagnostic" },
    { "<leader>ll", "<cmd>lua vim.lsp.codelens.run()<cr>", desc = "CodeLens Action" },
    { "<leader>lq", "<cmd>lua vim.lsp.diagnostic.set_loclist()<cr>", desc = "Diagnostic quickfix" },
    { "<leader>lr", "<cmd>lua vim.lsp.buf.rename()<cr>", desc = "Rename" },
    { "<leader>ls", "<cmd>Telescope lsp_document_symbols<cr>", desc = "Document Symbols" },
    { "<leader>lu", "<cmd>LuaSnipUnlinkCurrent<cr>", desc = "Unlink Snippet" },
    { "<leader>lv", "<cmd>lua require('lsp_lines').toggle()<cr>", desc = "Virtual Text" },
    { "<leader>lw", "<cmd>Telescope lsp_workspace_diagnostics<cr>", desc = "Workspace Diagnostics" },
    { "<leader>lx", "<cmd>TroubleToggle quickfix<cr>", desc = "Trouble quickfix" },
    { "<leader>lz", "<cmd>TroubleToggle loclist<cr>", desc = "Trouble loclist" },
    { "<leader>q", '<cmd>lua require("util/functions").smart_quit()<CR>', desc = "Quit" },
    { "<leader>rf", "<cmd>lua require('spectre').open_file_search()<cr>", desc = "Replace Buffer" },
    { "<leader>rr", "<cmd>lua require('spectre').open()<cr>", desc = "Replace" },
    { "<leader>rw", "<cmd>lua require('spectre').open_visual({select_word=true})<cr>", desc = "Replace Word" },
    { "<leader>sc", "<cmd>ChatGPT<CR>", desc = "ChatGPT" },
    { "<leader>sd", group = "dotiles" },
    { "<leader>sdn", '<cmd>lua require("plugins.telescope").search_nvim_dotfiles()<CR>', desc = "Nvim dotfiels" },
    { "<leader>sds", '<cmd>lua require("plugins.telescope").search_dotfiles()<CR>', desc = "System dotfiels" },
    { "<leader>sh", "<cmd>lua _HTOP_TOGGLE()<CR>", desc = "htop" },
    { "<leader>sr", "<cmd>lua _NODE_TOGGLE()<CR>", desc = "Node REPL" },
    { "<leader>ss", "<cmd>lua require('util.assistance').so_input()<CR>", desc = " StackOverflow" },
    { "<leader>sw", "<cmd>:%s/\\s\\+$//<CR>", desc = "Trim Whitespaces" },
    { "<leader>sx", "<cmd>lua _XPLR_TOGGLE()<CR>", desc = "File Xplr" },
    { "<leader>t", "<cmd>ToggleTerm <CR>", desc = "ToggleTerm" },
  }
}
